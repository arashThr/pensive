{{template "header" .}}

<div class="px-8 py-16 max-w-5xl mx-auto">
  
  <!-- Page Header -->
  <div class="mb-16">
    <h1 class="text-4xl font-bold mb-4 text-gray-900">Account Settings</h1>
    <p class="text-lg text-gray-600">Manage your profile, integrations, and data.</p>
  </div>
  
  <div class="flex flex-col lg:flex-row gap-8">
    
    <!-- Mobile Tab Selector -->
    <div class="lg:hidden">
      <select 
        id="mobile-tab-select"
        name="tab"
        class="w-full px-4 py-3 border border-gray-300 rounded-lg bg-white text-gray-900 font-medium"
        hx-get="/users/tab-content"
        hx-target="#tab-content"
        hx-swap="innerHTML"
        hx-trigger="change"
      >
        <option value="profile">Profile</option>
        <option value="tokens">API Tokens</option>
        <option value="import-export">Import / Export</option>
        <option value="data-management">Data Management</option>
      </select>
    </div>

    <!-- Desktop Sidebar -->
    <div class="hidden lg:block lg:w-64 lg:flex-shrink-0">
      <nav class="bg-white border border-gray-200 rounded-xl overflow-hidden">
        <ul class="space-y-1 p-2">
          <li>
            <button 
              class="tab-button w-full text-left px-4 py-3 font-medium text-gray-700 hover:bg-gray-50 rounded-lg transition-colors active"
              data-tab="profile"
              hx-get="/users/tab-content?tab=profile"
              hx-target="#tab-content"
              hx-swap="innerHTML"
            >
              Profile
            </button>
          </li>
          <li>
            <button 
              class="tab-button w-full text-left px-4 py-3 font-medium text-gray-700 hover:bg-gray-50 rounded-lg transition-colors"
              data-tab="tokens"
              hx-get="/users/tab-content?tab=tokens"
              hx-target="#tab-content"
              hx-swap="innerHTML"
            >
              API Tokens
            </button>
          </li>
          <li>
            <button 
              class="tab-button w-full text-left px-4 py-3 font-medium text-gray-700 hover:bg-gray-50 rounded-lg transition-colors"
              data-tab="import-export"
              hx-get="/users/tab-content?tab=import-export"
              hx-target="#tab-content"
              hx-swap="innerHTML"
            >
              Import / Export
            </button>
          </li>
          <li>
            <button 
              class="tab-button w-full text-left px-4 py-3 font-medium text-gray-700 hover:bg-gray-50 rounded-lg transition-colors"
              data-tab="data-management"
              hx-get="/users/tab-content?tab=data-management"
              hx-target="#tab-content"
              hx-swap="innerHTML"
            >
              Data Management
            </button>
          </li>
        </ul>
      </nav>
    </div>

    <!-- Tab Content Area -->
    <div class="flex-1">
      <div id="tab-content" class="bg-white border border-gray-200 rounded-xl p-8"
           hx-get="/users/tab-content?tab=profile"
           hx-trigger="load"
           hx-swap="innerHTML">
        
        <!-- Loading State -->
        <div class="text-center py-16">
          <div class="inline-block w-8 h-8 border-2 border-violet-600 border-t-transparent rounded-full animate-spin"></div>
          <p class="mt-4 font-medium text-gray-600">Loading...</p>
        </div>
        
      </div>
    </div>
  </div>
</div>

<!-- JavaScript -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const tabButtons = document.querySelectorAll('.tab-button');
  const mobileSelect = document.getElementById('mobile-tab-select');
  
  // Desktop tab switching
  tabButtons.forEach(button => {
    button.addEventListener('click', function() {
      // Remove active styles from all buttons
      tabButtons.forEach(btn => {
        btn.classList.remove('active', 'bg-violet-600', 'text-white');
        btn.classList.add('hover:bg-gray-50');
      });
      
      // Add active styles to clicked button
      this.classList.add('active', 'bg-violet-600', 'text-white');
      this.classList.remove('hover:bg-gray-50');
      
      // Update mobile select to match
      const tab = this.getAttribute('data-tab');
      mobileSelect.value = tab;
    });
  });
  
  // Mobile tab switching
  mobileSelect.addEventListener('change', function() {
    const selectedTab = this.value;
    
    // Update desktop active state
    tabButtons.forEach(btn => {
      btn.classList.remove('active', 'bg-violet-600', 'text-white');
      btn.classList.add('hover:bg-gray-50');
      
      if (btn.getAttribute('data-tab') === selectedTab) {
        btn.classList.add('active', 'bg-violet-600', 'text-white');
        btn.classList.remove('hover:bg-gray-50');
      }
    });
  });
  
  // Set initial active state
  const profileButton = document.querySelector('[data-tab="profile"]');
  if (profileButton) {
    profileButton.classList.add('active', 'bg-violet-600', 'text-white');
    profileButton.classList.remove('hover:bg-gray-50');
  }
  
  // File upload utilities
  function formatFileSize(bytes) {
    if (bytes === 0) return '0 BYTES';
    const k = 1024;
    const sizes = ['BYTES', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  function showFileSelected(file, uploadArea, uploadState, fileSelected, fileName, fileSize) {
    uploadArea.classList.remove('border-gray-300', 'hover:bg-gray-50');
    uploadArea.classList.add('border-violet-300', 'bg-violet-50');
    
    uploadState.classList.add('hidden');
    fileSelected.classList.remove('hidden');
    
    fileName.textContent = file.name;
    fileSize.textContent = formatFileSize(file.size);
  }

  function resetUploadState(uploadArea, uploadState, fileSelected, fileInput) {
    uploadArea.classList.remove('bg-violet-50', 'border-violet-300');
    uploadArea.classList.add('border-gray-300', 'hover:bg-gray-50');
    
    uploadState.classList.remove('hidden');
    fileSelected.classList.add('hidden');
    
    fileInput.value = '';
  }

  // File input change handler
  document.addEventListener('change', function(e) {
    if (e.target && e.target.id === 'import-file') {
      const file = e.target.files[0];
      if (file) {
        const uploadArea = document.getElementById('file-upload-area');
        const uploadState = document.getElementById('upload-state');
        const fileSelected = document.getElementById('file-selected');
        const fileName = document.getElementById('file-name');
        const fileSize = document.getElementById('file-size');
        
        if (uploadArea && uploadState && fileSelected && fileName && fileSize) {
          showFileSelected(file, uploadArea, uploadState, fileSelected, fileName, fileSize);
        }
      }
    }
  });

  // Remove file button handler
  document.addEventListener('click', function(e) {
    if (e.target && e.target.id === 'remove-file') {
      const uploadArea = document.getElementById('file-upload-area');
      const uploadState = document.getElementById('upload-state');
      const fileSelected = document.getElementById('file-selected');
      const fileInput = document.getElementById('import-file');
      
      if (uploadArea && uploadState && fileSelected && fileInput) {
        resetUploadState(uploadArea, uploadState, fileSelected, fileInput);
      }
    }
  });

  // Drag and drop handlers
  document.addEventListener('dragover', function(e) {
    if (e.target && e.target.closest('#file-upload-area')) {
      e.preventDefault();
      const uploadArea = document.getElementById('file-upload-area');
      if (uploadArea) {
        uploadArea.classList.add('bg-gray-50');
      }
    }
  });

  document.addEventListener('dragleave', function(e) {
    if (e.target && e.target.closest('#file-upload-area')) {
      e.preventDefault();
      const uploadArea = document.getElementById('file-upload-area');
      if (uploadArea) {
        uploadArea.classList.remove('bg-gray-50');
      }
    }
  });

  document.addEventListener('drop', function(e) {
    if (e.target && e.target.closest('#file-upload-area')) {
      e.preventDefault();
      const uploadArea = document.getElementById('file-upload-area');
      if (uploadArea) {
        uploadArea.classList.remove('bg-gray-50');
      }
      
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        const file = files[0];
        if (file.name.toLowerCase().endsWith('.zip')) {
          const fileInput = document.getElementById('import-file');
          if (fileInput) {
            const dt = new DataTransfer();
            dt.items.add(file);
            fileInput.files = dt.files;
            
            const uploadState = document.getElementById('upload-state');
            const fileSelected = document.getElementById('file-selected');
            const fileName = document.getElementById('file-name');
            const fileSize = document.getElementById('file-size');
            
            if (uploadState && fileSelected && fileName && fileSize) {
              showFileSelected(file, uploadArea, uploadState, fileSelected, fileName, fileSize);
            }
          }
        } else {
          alert('ZIP FILES ONLY');
        }
      }
    }
  });
});
</script>

{{template "footer" .}}